name: Java CI

on:
  push:
    branches: 
      - development
  
env:
  OLD_RELEASE_VERSION: ''
  NEW_RELEASE_VERSION: ${{ join(github.run_id, github.run_number) }}
      

jobs:
  test:
    name: Testing Merge to Development Branch
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Printing Git Branch
      run: git branch
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Verify with Maven, Scan with Sonar
      run: |
        mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      
  docker:
      name: Docker build and push
      runs-on: ubuntu-latest
      needs: [test]
      
      steps:
        - uses: actions/checkout@v2
        - name: Setting Version Number
          run: |
            mvn versions:set -DnewVersion=${NEW_RELEASE_VERSION}-SNAPSHOT
        - name: Maven Package
          run: |
            mvn package 
        - name: Target Contents
          run: |
            ls target
        - name: Login to Docker
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PWD }}
        - name: Build Docker Image
          run: docker build --build-arg release_version=$NEW_RELEASE_VERSION -t lucky_numbers:$NEW_RELEASE_VERSION -t ${{ secrets.DOCKER_USER }}/lucky_numbers:$NEW_RELEASE_VERSION . 
        - name: Publish Docker image
          run: |
            docker push ${{ secrets.DOCKER_USER }}/lucky_numbers:$NEW_RELEASE_VERSION
            echo "::set-env name=OLD_RELEASE_VERSION::$(cat version.ver)"
            echo "OLD_VERSION: $OLD_RELEASE_VERSION"
            echo "Pushed Docker Image with New Release"


  ssh_staging:
      name: SSH Deploy to Staging
      runs-on: ubuntu-latest
      needs: [test,docker]

      steps:
      - name: SSHing to Dev environment
        run: |
          echo "${{ secrets.SSH_KEY }}" > /temp/id_rsa.file
          ssh -i /temp/id_rsa.file -tt ${{ secrets.SSH_USER }}@${{ secrets.SSH_STAGING_HOST }} <<EOF
          docker rm -f lucky_numberz || true 
          docker rmi lucky_numbers:$OLD_RELEASE_VERSION || true
          docker rmi ${{ secrets.DOCKER_USER }}/lucky_numbers:$OLD_RELEASE_VERSION || true
          docker rm -f mysql_docker_data || true
          docker build -t mysql_docker_data:0.0.1 -<<EOF
          FROM mysql:latest
          VOLUME /var/lib/mysql
          CMD ["true"]
          EOF
          docker create --name mysql_docker_data mysql_docker_data:0.0.1 
          docker rm -f docker-mysql || true
          docker run -d -p 6603:3306 --name docker-mysql --volumes-from mysql_docker_data \
          -v /var/lib/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_PASSWORD=root \
          -e MYSQL_DATABASE=omarze mysql

          docker run -d -p 9111:9012 -e RELEASE_TAG=$NEW_RELEASE_VERSION --name lucky_numberz --link docker-mysql:mysql lucky_numbers:$NEW_RELEASE_VERSION 
          EOF
          rm -rf /temp/id_rsa.file

