name: Development Merge

on:
  push:
    branches: 
      - development
  
env:
  OLD_RELEASE_VERSION: ''
  NEW_RELEASE_VERSION: ${{ join(github.run_id, github.run_number) }}
      

jobs:
  test:
    name: Testing Merge to Development Branch
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Printing Git Branch
      run: git branch
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Verify with Maven, Scan with Sonar
      run: |
        mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  
  generate-version:
      name: Generate Semantic Version
      runs-on: ubuntu-latest
      needs: [test]

      steps:
        - uses: actions/checkout@v1
        - name: Get Git Version
          uses: docker://gittools/gitversion:5.0.2-beta1-27-linux-centos-7-netcoreapp2.2
          with:
            args: /github/workspace /nofetch /exec /bin/sh /execargs "-c \"echo $GitVersion_FullSemVer > /github/workspace/version.txt\""
      
      
  docker:
      name: Docker build and push
      runs-on: ubuntu-latest
      needs: [test]
      
      steps:
        - uses: actions/checkout@v2
        - name: Read Version Number
          run: |
            NEW_RELEASE_VERSION = $(cat /home/runner/work/luckynumbers/luckynumbers/version.txt)
            echo "New Version: ${NEW_RELEASE_VERSION}"
        - name: Setting Version Number
          run: |
            echo "Setting Newly Read Version: ${NEW_RELEASE_VERSION}"
            mvn versions:set -DnewVersion=${NEW_RELEASE_VERSION}-SNAPSHOT
        - name: Maven Package
          run: |
            mvn package 
        - name: Target Contents
          run: |
            ls target
        - name: Login to Docker
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PWD }}
        - name: Build Docker Image
          run: docker build --build-arg release_version=$NEW_RELEASE_VERSION -t lucky_numbers:$NEW_RELEASE_VERSION -t ${{ secrets.DOCKER_USER }}/lucky_numbers:$NEW_RELEASE_VERSION . 
        - name: Publish Docker image
          run: |
            docker push ${{ secrets.DOCKER_USER }}/lucky_numbers:$NEW_RELEASE_VERSION
            echo "::set-env name=OLD_RELEASE_VERSION::$(cat version.ver)"
            echo "OLD_VERSION: $OLD_RELEASE_VERSION"
            echo "Pushed Docker Image with New Release"




